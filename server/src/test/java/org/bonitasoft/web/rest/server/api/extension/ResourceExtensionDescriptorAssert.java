package org.bonitasoft.web.rest.server.api.extension;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;


/**
 * {@link ResourceExtensionDescriptor} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ResourceExtensionDescriptorAssert extends AbstractAssert<ResourceExtensionDescriptorAssert, ResourceExtensionDescriptor> {

  /**
   * Creates a new </code>{@link ResourceExtensionDescriptorAssert}</code> to make assertions on actual ResourceExtensionDescriptor.
   * @param actual the ResourceExtensionDescriptor we want to make assertions on.
   */
  public ResourceExtensionDescriptorAssert(ResourceExtensionDescriptor actual) {
    super(actual, ResourceExtensionDescriptorAssert.class);
  }

  /**
   * An entry point for ResourceExtensionDescriptorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myResourceExtensionDescriptor)</code> and get specific assertion with code completion.
   * @param actual the ResourceExtensionDescriptor we want to make assertions on.
   * @return a new </code>{@link ResourceExtensionDescriptorAssert}</code>
   */
  public static ResourceExtensionDescriptorAssert assertThat(ResourceExtensionDescriptor actual) {
    return new ResourceExtensionDescriptorAssert(actual);
  }

  /**
   * Verifies that the actual ResourceExtensionDescriptor's classFile is equal to the given one.
   * @param classFile the given classFile to compare the actual ResourceExtensionDescriptor's classFile to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceExtensionDescriptor's classFile is not equal to the given one.
   */
  public ResourceExtensionDescriptorAssert hasClassFileName(String classFile) {
    // check that actual ResourceExtensionDescriptor we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> classFile to be:\n  <%s>\n but was:\n  <%s>", actual, classFile, actual.getClassFileName());
    
    // check
    if (!actual.getClassFileName().equals(classFile)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResourceExtensionDescriptor's method is equal to the given one.
   * @param method the given method to compare the actual ResourceExtensionDescriptor's method to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceExtensionDescriptor's method is not equal to the given one.
   */
  public ResourceExtensionDescriptorAssert hasMethod(String method) {
    // check that actual ResourceExtensionDescriptor we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> method to be:\n  <%s>\n but was:\n  <%s>", actual, method, actual.getMethod());
    
    // check
    if (!actual.getMethod().equals(method)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResourceExtensionDescriptor's pageName is equal to the given one.
   * @param pageName the given pageName to compare the actual ResourceExtensionDescriptor's pageName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceExtensionDescriptor's pageName is not equal to the given one.
   */
  public ResourceExtensionDescriptorAssert hasPageName(String pageName) {
    // check that actual ResourceExtensionDescriptor we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> pageName to be:\n  <%s>\n but was:\n  <%s>", actual, pageName, actual.getPageName());
    
    // check
    if (!actual.getPageName().equals(pageName)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResourceExtensionDescriptor's pathTemplate is equal to the given one.
   * @param pathTemplate the given pathTemplate to compare the actual ResourceExtensionDescriptor's pathTemplate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResourceExtensionDescriptor's pathTemplate is not equal to the given one.
   */
  public ResourceExtensionDescriptorAssert hasPathTemplate(String pathTemplate) {
    // check that actual ResourceExtensionDescriptor we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> pathTemplate to be:\n  <%s>\n but was:\n  <%s>", actual, pathTemplate, actual.getPathTemplate());
    
    // check
    if (!actual.getPathTemplate().equals(pathTemplate)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

}
